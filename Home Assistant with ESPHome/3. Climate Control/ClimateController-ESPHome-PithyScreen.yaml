substitutions:
  # UNIQUE NAME FOR THE DEVICE
  deviceName: living_room_pithy_screen
  deviceUpper: Living Room Pithy Screen

  # ENTITY MAPPING FOR THE DIFFERENT FUNCTIONS
  climate: living_room # ID OF THERMOSTAT IN HA

  # CUSTOM OPTIONS
  alertTimeout: 30s # NUMBER OF SECONDS THE ALERTS WILL BE SHOWN
  climateLower: '10' # CLIMATE LOWER LIMIT
  climateUpper: '30' # CLIMATE UPPER LIMIT

  # SWITCH MAPPING. SELECT THE SWITCH FOR EACH ACTION
  switchMenu: ${sideSwitch}
  switchAction: ${encoderSwitch}
  
  # WIFI AND OTHER CREDENTIALS. USE SECRETS WHERE POSSIBLE
  wifiPass: !secret wifiPass
  wifiSSID: !secret wifiSSID
  passOTA: !secret passOTA
  passESPH: !secret passESPH
  
  # ESP DECLARATION
  boardPlatform: ESP8266
  boardName: d1_mini
  
  # PIN MAPPING. DEFAULTS TO ioios.io PITHY AND COUNTER DEVICES
  encoderPinA: D5
  encoderPinB: D6
  encoderSwitch: D7
  i2cData: D1
  i2cClock: D2
  pirSensor: D3
  sideSwitch: TX
  neoPixels: RX

###############################################################################
# WHOA WHERE ARE YOU GOING? GO STEADY BEYOND HERE, THIS IS THE BREAKABLE BIT! #
###############################################################################

esphome:
  name: $deviceName
  platform: $boardPlatform
  board: $boardName
  on_boot:
    priority: 250
    then:
      - binary_sensor.template.publish:
          id: api_connected
          state: OFF
      - wait_until:
          api.connected
      - delay: 15s
      - binary_sensor.template.publish:
          id: api_connected
          state: ON

wifi:
  ssid: ${wifiSSID}
  password: ${wifiPass}

captive_portal:
logger:
ota:
  password: ${passOTA}
  
i2c:
  sda: ${i2cData}
  scl: ${i2cClock}
  scan: True
  frequency: 200MHz
  id: bus_a

time:
  - platform: homeassistant
    id: homeassistant_time
    
api:
  password: ${passESPH} 
  services:
    - service: alert_doorbell
      then:
        - display.page.show: pageDoorbell
        - delay: ${alertTimeout}
        - display.page.show: pageMedia
    - service: alert_dinnertime
      then:
        - display.page.show: pageDinnerTime
        - delay: ${alertTimeout}
        - display.page.show: pageMedia

font:
  - file: "fonts/LiberationSans-Regular.ttf"
    id: title_font
    size: 12
    glyphs: ":/HTPS"
  - file: "fonts/LiberationSans-Bold.ttf"
    id: title_font_bold
    size: 16
    glyphs: "ios."
  - file: "fonts/LiberationSans-Bold.ttf"
    id: small_font
    size: 16
    glyphs: ":/&!째0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."
  - file: "fonts/LiberationSans-Regular.ttf"
    id: large_font
    size: 38
    glyphs: ":/&!째0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."

image:
  - file: "images/heat.png"
    id: heat_image
    resize: 16x16
  - file: "images/tick.png"
    id: tick_image
    resize: 16x16
  - file: "images/off.png"
    id: off_image
    resize: 16x16
  - file: "images/alert.png"
    id: alert_image
    resize: 48x48
  - file: "images/dinner.png"
    id: dinner_image
    resize: 48x48
  - file: "images/door.png"
    id: door_image
    resize: 34x48
  - file: "images/ioios.png"
    id: ioios_image
    resize: 48x48
  - file: "images/ha.png"
    id: ha_image
    resize: 48x48

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    update_interval: 0.2s
    id: i2cDisplay
    pages:
      - id: pageMedia
        lambda: |-
          if (!id(api_connected).state) {
            it.printf(12, 2, id(title_font), TextAlign::TOP_LEFT, "HTTPS://");
            it.printf(124, 0, id(title_font_bold), TextAlign::TOP_RIGHT, "ioios.io");
            
            it.image(8, 16, id(ha_image));
            it.image(72, 16, id(ioios_image));
          } else {
            if (id(climate_state).state == "off") {
              it.image(56, 0, id(off_image));
            } else {
              if (id(climate_output).state) {
                  it.image(0, 0, id(heat_image));
              } else {
                  it.image(0, 0, id(tick_image));
              }
              it.printf(125, 0, id(small_font), TextAlign::TOP_RIGHT, "Set: %.0f째C", id(rotary_dial).state);
            }
            it.printf(64, 64, id(large_font), TextAlign::BOTTOM_CENTER, "%3.1f째C", id(climate_current).state);
          }
      
      - id: pageDoorbell
        lambda: |-
          it.image(0, 16, id(alert_image));
          it.image(80, 16, id(door_image));
          it.printf(64, 0, id(small_font), TextAlign::TOP_CENTER, "FRONT DOOR");
      
      - id: pageDinnerTime
        lambda: |-
          it.image(0, 16, id(alert_image));
          it.image(72, 16, id(dinner_image));
          it.printf(64, 0, id(small_font), TextAlign::TOP_CENTER, "DINNER TIME");

switch:
  - platform: restart
    name: "ESP Restart ${deviceUpper}"
    
sensor:
  - platform: wifi_signal
    name: ESP Signal ${deviceUpper}
    update_interval: 60s

  - platform: uptime
    name: ESP Uptime ${deviceUpper}
    update_interval: 60s
    
  - platform: sht3xd
    temperature:
      name: "${deviceUpper} Temperature"
      id: ${deviceName}_temperature
    humidity:
      name: "${deviceUpper} Humidity"
      id: ${deviceName}_humidity
    address: 0x44
    update_interval: 15s

  - platform: homeassistant
    id: climate_current
    entity_id: sensor.${climate}_climate_temperature
    internal: true

  - platform: homeassistant
    id: climate_setpoint
    entity_id: sensor.${climate}_climate_setpoint
    internal: true
    on_value:
      then:
        - sensor.rotary_encoder.set_value:
            id: rotary_dial
            value: !lambda 'return x;'

  - platform: rotary_encoder
    id: rotary_dial
    pin_a:
      number: ${encoderPinA}
      inverted: true
      mode: INPUT_PULLUP
    pin_b:
      number: ${encoderPinB}
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - debounce: 0.2s
    resolution: 1
    min_value: ${climateLower}
    max_value: ${climateUpper}
    on_value:
      then:
        - homeassistant.service:
            service: climate.set_temperature
            data_template:
              entity_id: climate.${climate}
              temperature: "{{ climate_target | int }}"
            variables:
              climate_target: !lambda 'return id(rotary_dial).state;'
              
text_sensor:
  - platform: homeassistant
    id: climate_state
    entity_id: climate.${climate}
    internal: true
    
binary_sensor:
  - platform: template
    id: api_connected

  - platform: homeassistant
    id: climate_output
    entity_id: binary_sensor.${climate}_climate_heating
    internal: true

  - platform: gpio
    pin:
      number: ${switchAction}
      inverted: true
      mode: INPUT_PULLUP
    name: Switch ${deviceUpper}
    internal: true
    on_click:
      then:
        if:
          condition:
            lambda: 'return id(climate_state).state == "off";'
          then:
            - homeassistant.service:
                service: climate.turn_on
                data:
                  entity_id: climate.${climate}
          else:
            - homeassistant.service:
                service: climate.turn_off
                data:
                  entity_id: climate.${climate}