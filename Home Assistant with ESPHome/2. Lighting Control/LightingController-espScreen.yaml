substitutions:
  # UNIQUE NAME FOR THE DEVICE
  devicename: pithy_screen
  deviceUpper: Pithy Screen

  # ENTITY MAPPING FOR THE DIFFERENT FUNCTIONS
  lightGroup: living_room
  
  # SWITCH MAPPING. SELECT THE SWITCH FOR EACH ACTION
  switchMenu: ${sideSwitch}
  switchAction: ${encoderSwitch}
  
  # WIFI AND OTHER CREDENTIALS. USE SECRETS WHERE POSSIBLE
  wifiPass: !secret wifiPass
  wifiSSID: !secret wifiSSID
  passOTA: !secret passOTA
  passESPH: !secret passESPH
  
  # ESP DECLARATION
  boardPlatform: ESP8266
  boardName: d1_mini
  
  # PIN MAPPING. DEFAULTS TO ioios.io PITHY AND COUNTER DEVICES
  encoderPinA: D5
  encoderPinB: D6
  encoderSwitch: D7
  i2cData: D1
  i2cClock: D2
  pirSensor: D3
  sideSwitch: TX
  neoPixels: RX

###############################################################################
# WHOA WHERE ARE YOU GOING? GO STEADY BEYOND HERE, THIS IS THE BREAKABLE BIT! #
###############################################################################

esphome:
  name: ${devicename}
  platform: ${boardPlatform}
  board: ${boardName}
  on_boot:
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: api_connected
          state: OFF
      - wait_until:
          api.connected
      - binary_sensor.template.publish:
          id: api_connected
          state: ON

wifi:
  ssid: ${wifiSSID}
  password: ${wifiPass}

captive_portal:
logger:
ota:
  password: ${passOTA}
  
i2c:
  sda: ${i2cData}
  scl: ${i2cClock}
  scan: True
  frequency: 200MHz
  id: bus_a

time:
  - platform: homeassistant
    id: homeassistant_time
    
api:
  password: ${passESPH} 

font:
  - file: "fonts/Paul.ttf"
    id: title_font
    size: 16
    glyphs: ":/&!°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."
  - file: "fonts/Paul.ttf"
    id: standard_font
    size: 26
    glyphs: ":/&!°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ."

image:
  - file: "images/play.png"
    id: warmth_image
    resize: 48x48
  - file: "images/pause.png"
    id: brightness_image
    resize: 48x48
  - file: "images/ioios.png"
    id: ioios_image
    resize: 48x48
  - file: "images/ha.png"
    id: ha_image
    resize: 48x48

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    update_interval: 0.1s
    id: i2cDisplay
    pages:
      - id: pageMain
        lambda: |-
          if (!id(api_connected).state) {
            it.printf(64, 0, id(title_font), TextAlign::TOP_CENTER, "CONNECTING");
            
            it.image(8, 16, id(ioios_image));
            it.image(72, 16, id(ha_image));
          } else {
            if(id(menu_tracker).state != 0) id(menu_tracker).publish_state(0);
          }
          
      - id: pageBrightness
        lambda: |-
          if(id(menu_tracker).state != 1) id(menu_tracker).publish_state(1);
          
          it.rectangle(13, 0, 102, 16);
          it.filled_rectangle(14, 1, id(brightness_percent).state, 14);
          it.printf(17, 39, id(standard_font), "Brightness");
      - id: pageWarmth
        lambda: |-
          if(id(menu_tracker).state != 2) id(menu_tracker).publish_state(2);
          
          it.rectangle(13, 0, 102, 16);
          it.filled_rectangle(14, 1, id(warmth_percent).state, 14);
          it.printf(32, 39, id(standard_font), "Warmth");

switch:
  - platform: restart
    name: "ESP Restart ${deviceUpper}"
    
sensor:
  - platform: wifi_signal
    name: ESP Signal ${deviceUpper}
    update_interval: 60s

  - platform: uptime
    name: ESP Uptime ${deviceUpper}
    update_interval: 60s
    
  - platform: sht3xd
    temperature:
      name: "${deviceUpper} Temperature"
      id: ${devicename}_temperature
    humidity:
      name: "${deviceUpper} Humidity"
      id: ${devicename}_humidity
    address: 0x44
    update_interval: 15s
    
  - platform: rotary_encoder
    id: rotary_dial
    pin_a:
      number: ${encoderPinA}
      inverted: true
      mode: INPUT_PULLUP
    pin_b:
      number: ${encoderPinB}
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - debounce: 0.1s
      - lambda: |-
          if(id(menu_tracker).state == 1) {
            if (x < 0.0) return 0.0;
            if (x > 254.0) return 254.0;
            return x;
          } else if(id(menu_tracker).state == 2) {
            if (x < 153.0) return 153.0;
            if (x > 465.0) return 465.0;
            return x;
          } else {
            return x;
          }
    resolution: 4
    min_value: 0
    max_value: 465
    on_value: 
      then:
        - if:
            condition:
              lambda: 'return id(menu_tracker).state == 1;'
            then:
              - homeassistant.service:
                  service: light.turn_on
                  data_template:
                    entity_id: light.${lightGroup}
                    brightness: "{{ brightness | int }}"
                  variables:
                    brightness: !lambda 'return id(rotary_dial).state;'
              - sensor.template.publish:
                  id: brightness_percent
                  state: !lambda 'return (id(rotary_dial).state / 256) * 100;'
            else:
              - if:
                  condition:
                    lambda: 'return id(menu_tracker).state == 2;'
                  then:
                    - homeassistant.service:
                        service: light.turn_on
                        data_template:
                          entity_id: light.${lightGroup}
                          color_temp: "{{ warmth | int }}"
                        variables:
                          warmth: !lambda 'return id(rotary_dial).state;'
                    - sensor.template.publish:
                        id: warmth_percent
                        state: !lambda 'return ((id(rotary_dial).state - 153) / (465 - 153)) * 100;'
                  else:
                    - if:
                        condition:
                          lambda: 'return id(menu_tracker).state == 0;'
                        then:
                          - display.page.show: pageBrightness
                          - sensor.template.publish:
                              id: brightness_percent
                              state: !lambda 'return (id(brightness).state / 256) * 100;'
                          - sensor.rotary_encoder.set_value:
                              id: rotary_dial
                              value: !lambda 'return id(brightness).state;'

  - platform: homeassistant
    id: brightness
    entity_id: sensor.${lightGroup}_brightness
    force_update: true

  - platform: homeassistant
    id: warmth
    entity_id: sensor.${lightGroup}_warmth
    force_update: true
    
  - platform: template
    name: "Menu Sensor"
    id: menu_tracker
    internal: true

  - platform: template
    id: brightness_percent
    lambda: |-
      if (id(brightness).state) {
        return (id(brightness).state / 256) * 100;
      } else {
        return 0;
      }
    update_interval: 20s
    internal: true
    
  - platform: template
    id: warmth_percent
    lambda: |-
      if (id(warmth).state) {
        return ((id(warmth).state - 153) / (465 - 153)) * 100;
      } else {
        return 0;
      }
    update_interval: 20s
    internal: true
    
binary_sensor:
  - platform: template
    id: api_connected

  - platform: gpio
    pin:
      number: ${switchMenu}
      inverted: true
      mode: INPUT_PULLUP
    name: Menu ${deviceUpper}
    internal: true
    on_press:
      then:
        - logger.log: "Next Page"
        - display.page.show_next: i2cDisplay
        - delay: 0.1s
        - if:
            condition:
              lambda: 'return id(menu_tracker).state == 0;'
            then:
              - logger.log: "Switched to main page"
            else:
              - if:
                  condition:
                    lambda: 'return id(menu_tracker).state == 1;'
                  then:
                    - logger.log: "Switched to brightness page"
                    - sensor.rotary_encoder.set_value:
                        id: rotary_dial
                        value: !lambda 'return id(brightness).state;'
                  else:
                    - if:
                        condition:
                          lambda: 'return id(menu_tracker).state == 2;'
                        then:
                          - logger.log: "Switched to warmth page"
                          - sensor.rotary_encoder.set_value:
                              id: rotary_dial
                              value: !lambda 'return id(warmth).state;'